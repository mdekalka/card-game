{"version":3,"sources":["constants/constants.ts","assets/cards/a2.png","assets/cards/a20.png","lists/imagesList.ts","assets/cards/a21.png","assets/cards/a22.png","assets/cards/a18.png","assets/cards/a19.png","assets/cards/a17.png","assets/cards/a15.png","assets/cards/a16.png","assets/cards/a14.png","assets/cards/a11.png","assets/cards/a12.png","config/config.ts","components/Board/BoardCell/BoardCell.tsx","components/Board/BoardGrid/BoardGrid.tsx","utils/array.ts","components/Message/Message.tsx","components/PointsBoard/PointsBoard.tsx","components/GameOver/GameOver.tsx","assets/music/Dion_Theme.mp3","assets/music/Hunter_Village_Theme.mp3","assets/music/After_The_Storm.mp3","assets/music/Battle_Theme_3.mp3","assets/music/Crossroad_At_Dawn.mp3","assets/music/Elven_Village_Theme.mp3","assets/music/Floran_Theme.mp3","assets/music/Giran_Theme.mp3","assets/music/The_Enemy_Warlord_Appears.mp3","assets/music/Tragic_Love.mp3","assets/icons/logo.png","lists/tracksList.ts","components/PlayListMenu/usePlaybackState.ts","components/PlayListMenu/Player/AudioPlayer/AudioPlayer.tsx","components/PlayListMenu/Player/TrackProgress/TrackProgress.tsx","components/PlayListMenu/Player/VolumeControl/VolumeControl.tsx","components/PlayListMenu/Player/TrackControls/TrackControls.tsx","components/PlayListMenu/Player/TrackPreview/TrackPreview.tsx","components/PlayListMenu/Player/PlayListPlayer/PlayListPlayer.tsx","components/PlayListMenu/TrackList/TrackList.tsx","hooks/useOutsideClick.ts","components/Drawer/Drawer.tsx","components/PlayListMenu/PlayListMenu.tsx","components/MenuSection/MenuSection.tsx","components/HardmodeSection/HardmodeSection.tsx","components/BoardSelectionSection/BoardSelectionSection.tsx","components/CardSelectionSection/CardSelectionSection.tsx","components/SettingsMenu/SettingsMenu.tsx","components/MemoryGame/MemoryGame.tsx","utils/boardUtils.ts","App.tsx","registerServiceWorker.js","index.tsx"],"names":["BOARD_SIZES","small","cells","rows","medium","large","DEFAULT_BOARD_SIZE","IMAGES_LIST","name","imagePath","pikachu","selected","venus","GAME_CONFIG","boardSize","boardRows","cardItems","stepsLimit","randomizeCells","BoardCell","cell","onCellClick","className","cx","opened","guessed","onClick","src","alt","id","BoardGrid","board","array","size","length","copy","result","i","push","splice","Math","ceil","splitToChunks","map","row","index","memo","Message","type","children","PointsBoard","attempts","options","guessedCount","restCells","GameOver","winner","onNewGame","TRACKS_LIST","key","dionTheme","icon","hunterVillageTheme","afterTheStorm","battleTheme3","crossroadAtDawn","elvenVillageTheme","floranTheme","giranTheme","theEnemyWarlordAppears","tragicLove","initialState","duration","played","seeking","playing","looping","muted","volume","AudioPlayer","forwardRef","ref","playbackState","activeTrack","onDuration","onProgress","onEnded","loop","url","width","height","momentDurationFormatSetup","moment","SliderWithTooltip","Slider","createSliderWithTooltip","formatTime","time","format","trim","TrackProgress","onSeekMouseDown","onSeekChange","onSeekMouseUp","min","max","value","round","tipFormatter","onBeforeChange","onChange","onAfterChange","VolumeControl","onVolumeChange","onVolumeToggle","vertical","aria-hidden","TrackControls","randomize","onRandomizeToggle","onLoopingToggle","active","TrackPreview","onToggleTrack","onTrackMove","PlayListPlayer","tracks","updatePlaybackState","onChangeTrack","playerRef","useRef","useState","setRandomize","forward","currentTrackIndex","findIndex","track","current","seekTo","availableTracks","filter","newActiveTrack","sample","TrackList","isActiveTrackPlaying","useOnClickOutside","handler","useEffect","listener","event","el","contains","target","document","addEventListener","removeEventListener","CloseOutside","targetRef","callback","Drawer","position","blackout","onClose","preventClose","closeOutside","PlayListMenu","setActiveTrack","state","setState","useCallback","newState","usePlaybackState","setPlaybackState","setOpened","MenuSection","header","calculateStepsLimit","successLimit","floor","HardmodeSection","onOptionsUpdate","limit","defaultChecked","BoardSelectionSection","sizes","Object","entries","sizeName","sizeList","insufficientCardsSelected","cards","selectedCards","CardSelectionSection","onError","insufficientCardCount","setInsufficientCardCount","cardsToSelect","filledCardItems","card","selectedCard","updatedCardItems","toggleCard","SettingsMenu","setPreventClose","hasError","MemoryGame","setBoard","cellsToCompare","setCellsToCompare","boardError","setboardError","setAttempts","setGuessedCount","setOptions","createBoard","resetGameOptions","Error","selectedCardItems","chosenCardItems","sampleSize","shuffle","cardItem","cuid","generateBoard","error","message","firstOpenedCard","lastOpenedCard","count","cellName","setGuessedCells","setTimeout","setClosedCells","setOpenedLastCells","newOptions","cellId","setOpenedCells","gameState","openedCells","allCellsOpened","gameOver","isGameOver","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2389564d.chunk.js","sourcesContent":["export const MAX_CARD_OPEN_COUNT = 2;\r\nexport const CARD_FLIP_ANIMATION_DELAY = 1000;\r\n\r\nexport const BOARD_SIZES = {\r\n  small: [{ cells: 8, rows: 2 }, { cells: 12, rows: 3 }],\r\n  medium: [{ cells: 16, rows: 4 }, { cells: 20, rows: 4 }],\r\n  large: [{ cells: 24, rows: 4 }]\r\n}\r\nexport const DEFAULT_BOARD_SIZE = BOARD_SIZES.medium[0];\r\n","export default __webpack_public_path__ + \"static/media/a2.7fe6cf42.png\";","export default __webpack_public_path__ + \"static/media/a20.b1075517.png\";","// Additional images\r\n// https://imgur.com/gallery/FRClL\r\nimport pikachu from '../assets/cards/a2.png';\r\nimport venus from '../assets/cards/a20.png';\r\nimport bulba from '../assets/cards/a21.png';\r\nimport ivy from '../assets/cards/a22.png';\r\nimport charmander from '../assets/cards/a18.png';\r\nimport charmeleon from '../assets/cards/a19.png';\r\nimport charizard from '../assets/cards/a17.png';\r\nimport squirtle from '../assets/cards/a15.png';\r\nimport wartoitle from '../assets/cards/a16.png';\r\nimport blastoise from '../assets/cards/a14.png';\r\nimport weedle from '../assets/cards/a11.png';\r\nimport butterfree from '../assets/cards/a12.png';\r\n\r\n\r\nexport const IMAGES_LIST = [\r\n  { name: 'pikachu', imagePath: pikachu , selected: true },\r\n  { name: 'bulba', imagePath: bulba , selected: true },\r\n  { name: 'ivy', imagePath: ivy , selected: true },\r\n  { name: 'venus', imagePath: venus , selected: true },\r\n  { name: 'charmander', imagePath: charmander , selected: true },\r\n  { name: 'charmeleon', imagePath: charmeleon , selected: true },\r\n  { name: 'charizard', imagePath: charizard , selected: true },\r\n  { name: 'squirtle', imagePath: squirtle , selected: true },\r\n  { name: 'wartoitle', imagePath: wartoitle , selected: true },\r\n  { name: 'blastoise', imagePath: blastoise , selected: true },\r\n  { name: 'weedle', imagePath: weedle , selected: true },\r\n  { name: 'butterfree', imagePath: butterfree , selected: true }\r\n]\r\n","export default __webpack_public_path__ + \"static/media/a21.ed0a4cc0.png\";","export default __webpack_public_path__ + \"static/media/a22.5323f618.png\";","export default __webpack_public_path__ + \"static/media/a18.24c3ea0f.png\";","export default __webpack_public_path__ + \"static/media/a19.4269b522.png\";","export default __webpack_public_path__ + \"static/media/a17.0cd17cde.png\";","export default __webpack_public_path__ + \"static/media/a15.6c9011c3.png\";","export default __webpack_public_path__ + \"static/media/a16.aeffa13c.png\";","export default __webpack_public_path__ + \"static/media/a14.0c0bdebe.png\";","export default __webpack_public_path__ + \"static/media/a11.d8b23e9b.png\";","export default __webpack_public_path__ + \"static/media/a12.05a2d713.png\";","import { DEFAULT_BOARD_SIZE } from '../constants/constants';\r\nimport { IMAGES_LIST } from '../lists/imagesList';\r\n\r\nexport const GAME_CONFIG: GameConfig = {\r\n  boardSize: DEFAULT_BOARD_SIZE.cells,\r\n  boardRows: DEFAULT_BOARD_SIZE.rows,\r\n  cardItems: IMAGES_LIST,\r\n  stepsLimit: 0,\r\n  randomizeCells: false\r\n};\r\n","import cx from 'classnames';\r\n\r\nimport './BoardCell.scss';\r\n\r\n\r\ninterface BoardCellProps {\r\n  cell?: Cell\r\n  onCellClick: (cell: Cell) => void\r\n}\r\n\r\nconst BoardCell = ({ cell, onCellClick }: BoardCellProps) => {\r\n  if (!cell) return null;\r\n\r\n  return (\r\n    <div\r\n      key={cell.id}\r\n      className={cx('board-cell', { opened: cell.opened, guessed: cell.guessed })}\r\n      onClick={() => cell.opened ? null : onCellClick(cell)}>\r\n        <div className=\"cell-preview cell-preview-front\" />\r\n        <div className=\"cell-preview cell-preview-back\">\r\n          <img className=\"cell-image\" src={cell.imagePath} alt={cell.name} />\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BoardCell;\r\n","import { memo } from 'react';\r\n\r\nimport { splitToChunks } from '../../../utils/array';\r\n\r\nimport BoardCell from '../BoardCell/BoardCell';\r\n\r\nimport './BoardGrid.scss';\r\n\r\n\r\ninterface BoardGridProps {\r\n  board: Board\r\n  rows: number\r\n  onCellClick: (cell: Cell) => void\r\n}\r\n\r\nconst BoardGrid = ({ board, rows, onCellClick }: BoardGridProps) => {\r\n  const boardRows = splitToChunks(board, rows);\r\n\r\n  return (\r\n    <div className=\"board-grid\">\r\n      {boardRows.map((row, index) => (\r\n        <div className=\"board-row\" key={index}>\r\n          {row.map(cell => (\r\n            <BoardCell key={cell.id} cell={cell} onCellClick={onCellClick} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(BoardGrid);\r\n","export const  splitToChunks = <T>(array: Array<T>, size: number) => {\r\n  if (!array || !array.length) return [];\r\n  \r\n  let copy = [...array];\r\n  let result = [];\r\n\r\n  for (let i = size; i > 0; i--) {\r\n    result.push(copy.splice(0, Math.ceil(copy.length / i)));\r\n  }\r\n\r\n  return result;\r\n}","import { ReactNode } from 'react';\r\n\r\nimport './Message.scss';\r\n\r\n\r\ninterface MessageProps {\r\n  type?: 'error' | 'warning'\r\n  children?: ReactNode\r\n}\r\n\r\nconst Message = ({ type, children }: MessageProps) => {\r\n  return (\r\n    <p className={`message ${type}`}>{children}</p>\r\n  )\r\n}\r\n\r\nexport default Message;\r\n","import './PointsBoard.scss';\r\n\r\n\r\ninterface PointsBoardProps {\r\n  attempts: number\r\n  options: GameConfig\r\n  guessedCount: number\r\n}\r\n\r\nconst PointsBoard = ({ attempts, options, guessedCount }: PointsBoardProps) => {\r\n  const { stepsLimit, randomizeCells } = options;\r\n  const restCells = options.boardSize - guessedCount;\r\n\r\n  return (\r\n    <div className=\"points-board\">\r\n      <p className=\"board-row\">Attempts: {attempts}</p>\r\n      <p className=\"board-row\">Cells left: {restCells}</p>\r\n      {!!stepsLimit &&\r\n        <p className=\"board-row\">\r\n          Steps limit: <span className=\"highlight\">{stepsLimit - attempts}</span> attempt(s) left\r\n        </p>}\r\n      {randomizeCells &&\r\n        <p className=\"board-row\">Randomize cells: <span className=\"highlight\">on</span></p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PointsBoard;\r\n","import './GameOver.scss';\r\n\r\n\r\ninterface GameOverProps {\r\n  onNewGame: () => void\r\n  winner: boolean\r\n}\r\n\r\nconst GameOver = ({ winner, onNewGame }: GameOverProps) => {\r\n  return (\r\n    <div className=\"game-over\">\r\n      <p>You {winner ? 'won' : 'lost'} the game.</p>\r\n      <button className=\"btn game-over-btn\" onClick={onNewGame}>New Game</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameOver;\r\n","export default __webpack_public_path__ + \"static/media/Dion_Theme.7cb4e7b6.mp3\";","export default __webpack_public_path__ + \"static/media/Hunter_Village_Theme.d0b77f68.mp3\";","export default __webpack_public_path__ + \"static/media/After_The_Storm.dc412311.mp3\";","export default __webpack_public_path__ + \"static/media/Battle_Theme_3.c29088cf.mp3\";","export default __webpack_public_path__ + \"static/media/Crossroad_At_Dawn.6d0a3ea3.mp3\";","export default __webpack_public_path__ + \"static/media/Elven_Village_Theme.b4e64d64.mp3\";","export default __webpack_public_path__ + \"static/media/Floran_Theme.ad0c6ff4.mp3\";","export default __webpack_public_path__ + \"static/media/Giran_Theme.6eec5e60.mp3\";","export default __webpack_public_path__ + \"static/media/The_Enemy_Warlord_Appears.a83ebf82.mp3\";","export default __webpack_public_path__ + \"static/media/Tragic_Love.1c3020d0.mp3\";","export default __webpack_public_path__ + \"static/media/logo.edf3c368.png\";","import dionTheme from '../assets/music/Dion_Theme.mp3'\r\nimport hunterVillageTheme from '../assets/music/Hunter_Village_Theme.mp3'\r\nimport afterTheStorm from '../assets/music/After_The_Storm.mp3'\r\nimport battleTheme3 from '../assets/music/Battle_Theme_3.mp3'\r\nimport crossroadAtDawn from '../assets/music/Crossroad_At_Dawn.mp3'\r\nimport elvenVillageTheme from '../assets/music/Elven_Village_Theme.mp3'\r\nimport floranTheme from '../assets/music/Floran_Theme.mp3'\r\nimport giranTheme from '../assets/music/Giran_Theme.mp3'\r\nimport theEnemyWarlordAppears from '../assets/music/The_Enemy_Warlord_Appears.mp3'\r\nimport tragicLove from '../assets/music/Tragic_Love.mp3'\r\n\r\nimport icon from '../assets/icons/logo.png'\r\n\r\n\r\nexport const TRACKS_LIST = [\r\n  {\r\n    id: 1,\r\n    name: 'Dion Theme',\r\n    key: 'dion-theme',\r\n    src: dionTheme,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Hunter Village Theme',\r\n    key: 'hunter-village-theme',\r\n    src: hunterVillageTheme,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'After The Storm',\r\n    key: 'after-the-storm',\r\n    src: afterTheStorm,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Battle Theme 3',\r\n    key: 'battle-theme-3',\r\n    src: battleTheme3,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Crossroad At Dawn',\r\n    key: 'crossroad-at-dawn',\r\n    src: crossroadAtDawn,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Elven Village Theme',\r\n    key: 'elven-village-theme',\r\n    src: elvenVillageTheme,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Floran Theme',\r\n    key: 'floran-theme',\r\n    src: floranTheme,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Giran Theme',\r\n    key: 'giran-theme',\r\n    src: giranTheme,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'The Enemy Warlord Appears',\r\n    key: 'the-enemy-warlord-appears',\r\n    src: theEnemyWarlordAppears,\r\n    icon: icon\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Tragic Love',\r\n    key: 'tragic-love',\r\n    src: tragicLove,\r\n    icon: icon\r\n  },\r\n]\r\n","import { useState, useCallback } from 'react';\r\n\r\n\r\nconst initialState = {\r\n  duration: 0,\r\n  played: 0,\r\n  seeking: false,\r\n  playing: false,\r\n  looping: false,\r\n  muted: false,\r\n  volume: 10\r\n}\r\n\r\nexport type PlaybackState = typeof initialState;\r\n\r\nexport const usePlaybackState = (): [PlaybackState, (state: Partial<PlaybackState>) => void] => {\r\n  const [ state, setState ] = useState(initialState);\r\n\r\n  const updatePlaybackState = useCallback((newState) => {\r\n    setState(state => ({ ...state, ...newState }));\r\n  }, [])\r\n\r\n  return [ state, updatePlaybackState ];\r\n}\r\n","import { forwardRef, LegacyRef } from 'react';\r\nimport ReactPlayer, { ReactPlayerProps } from 'react-player';\r\n\r\nimport { PlaybackState } from '../../usePlaybackState';\r\n\r\n\r\ninterface PlayerProps {\r\n  playbackState: PlaybackState\r\n  activeTrack: Track\r\n  onDuration: ReactPlayerProps['onDuration']\r\n  onProgress: ReactPlayerProps['onProgress']\r\n  onEnded: ReactPlayerProps['onEnded']\r\n}\r\n\r\ntype Ref = LegacyRef<ReactPlayer>\r\n\r\nconst AudioPlayer = forwardRef(({ playbackState, activeTrack, onDuration, onProgress, onEnded }: PlayerProps, ref: Ref) => {\r\n  if (!activeTrack || !playbackState) return null;\r\n\r\n  const { playing, looping, muted, volume } = playbackState;\r\n\r\n  return (\r\n    <ReactPlayer\r\n      ref={ref}\r\n      playing={playing}\r\n      loop={looping}\r\n      volume={muted ? 0 : volume / 100}\r\n      url={activeTrack.src}\r\n      muted={muted}\r\n      onDuration={onDuration}\r\n      onProgress={onProgress}\r\n      onEnded={onEnded}\r\n      width='100%'\r\n      height='0px'\r\n    />\r\n  )\r\n})\r\n\r\nexport default AudioPlayer;\r\n","import Slider from 'rc-slider';\r\nimport * as moment from 'moment';\r\nimport momentDurationFormatSetup  from 'moment-duration-format';\r\n\r\nimport { PlaybackState } from '../../usePlaybackState';\r\n\r\nimport './TrackProgress.scss';\r\n\r\n\r\nmomentDurationFormatSetup(moment);\r\nconst SliderWithTooltip = Slider.createSliderWithTooltip(Slider);\r\n\r\n\r\nconst formatTime = (time: number) => {\r\n  return moment.duration(time, 'seconds').format('m:ss', { trim: false });\r\n}\r\n\r\ninterface TrackProgressProps {\r\n  playbackState: PlaybackState\r\n  onSeekMouseDown: () => void\r\n  onSeekChange: (value: number) => void\r\n  onSeekMouseUp: (value: number) => void\r\n}\r\n\r\nconst TrackProgress = ({ playbackState, onSeekMouseDown, onSeekChange, onSeekMouseUp }: TrackProgressProps) => {\r\n  const { duration, played } = playbackState;\r\n\r\n  return (\r\n    <div className=\"track-progress\">\r\n      <div className=\"track-progress-time\">\r\n        <time>{formatTime(duration * played)}</time>\r\n        <time>{!!duration && formatTime(duration)}</time>\r\n      </div>\r\n      <SliderWithTooltip\r\n        className=\"track-progress-seek\"\r\n        min={0}\r\n        max={100}\r\n        value={Math.round(played * 100)}\r\n        tipFormatter={() => formatTime(duration * played)}\r\n        onBeforeChange={onSeekMouseDown}\r\n        onChange={onSeekChange}\r\n        onAfterChange={onSeekMouseUp}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TrackProgress;\r\n","import Slider from 'rc-slider';\r\n\r\nimport { PlaybackState } from '../../usePlaybackState';\r\n\r\nimport './VolumeControl.scss';\r\n\r\ninterface VolumeControlProps {\r\n  playbackState: PlaybackState\r\n  onVolumeChange: (volume: number) => void\r\n  onVolumeToggle:() => void\r\n}\r\n\r\nconst VolumeControl = ({ playbackState, onVolumeChange, onVolumeToggle}: VolumeControlProps) => {\r\n  const { muted, volume } = playbackState;\r\n\r\n  return (\r\n    <div className=\"volume-control\">\r\n      <div className=\"volume-control-slider\">\r\n        <Slider vertical min={0} max={100} value={muted ? 0 : volume} onChange={onVolumeChange} />\r\n      </div>\r\n      <i className={`icon fa-fw fa fa-volume-${muted ? 'off' : 'up'}`} onClick={onVolumeToggle} aria-hidden=\"true\"></i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VolumeControl;\r\n","import cx from 'classnames';\r\n\r\nimport { PlaybackState } from '../../usePlaybackState';\r\n\r\nimport VolumeControl from '../VolumeControl/VolumeControl'\r\n\r\nimport './TrackControls.scss';\r\n\r\n\r\ninterface TrackControlsProps {\r\n  playbackState: PlaybackState\r\n  randomize?: boolean\r\n  onRandomizeToggle: () => void\r\n  onLoopingToggle: () => void\r\n  onVolumeChange: (volume: number) => void\r\n  onVolumeToggle:() => void\r\n}\r\n\r\nconst TrackControls = ({ playbackState, randomize, onRandomizeToggle, onLoopingToggle, onVolumeChange, onVolumeToggle }: TrackControlsProps) => {\r\n  const { looping } = playbackState;\r\n\r\n  return (\r\n    <div className=\"track-controls\">\r\n      <i className={cx('icon fa fa-random', { active: randomize })} onClick={onRandomizeToggle} aria-hidden=\"true\"></i>\r\n      <i className={cx('icon fa fa-repeat', { active: looping })} onClick={onLoopingToggle} aria-hidden=\"true\"></i>\r\n      <VolumeControl\r\n        playbackState={playbackState}\r\n        onVolumeChange={onVolumeChange}\r\n        onVolumeToggle={onVolumeToggle}\r\n      />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default TrackControls;\r\n","import { ReactNode } from 'react';\r\n\r\nimport { PlaybackState } from '../../usePlaybackState';\r\n\r\nimport './TrackPreview.scss';\r\n\r\ninterface TrackProps {\r\n  playbackState: PlaybackState\r\n  activeTrack: Track\r\n  onToggleTrack: (track: Track) => void\r\n  onTrackMove: (next?: boolean) => void\r\n  children?: ReactNode\r\n}\r\n\r\nconst TrackPreview = ({ playbackState, activeTrack, onToggleTrack, onTrackMove, children }: TrackProps) => {\r\n  if (!activeTrack) return null;\r\n  \r\n  const { playing } = playbackState;\r\n  const { name, icon } = activeTrack;\r\n\r\n  return (\r\n    <div className=\"track-preview\">\r\n      <img className=\"track-preview-icon\" src={icon} alt='track preview icon' />\r\n      <div className=\"track-preview-controls\">\r\n        <i\r\n          className={`icon fa fa-fw fa-${playing ? 'pause' : 'play'}`}\r\n          onClick={() => onToggleTrack(activeTrack)}\r\n          aria-hidden=\"true\">\r\n        </i>\r\n        <i className=\"icon fa fa-step-backward\" onClick={() => onTrackMove()} aria-hidden=\"true\"></i>\r\n        <i className=\"icon fa fa-step-forward\" onClick={() => onTrackMove(true)} aria-hidden=\"true\"></i>\r\n      </div>\r\n      <div className=\"track-title ellipsis\">{name}</div>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TrackPreview;\r\n","import { useState, useRef, LegacyRef } from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport sample from 'lodash/sample';\r\n\r\nimport { PlaybackState } from '../../usePlaybackState';\r\n\r\nimport AudioPlayer from '../AudioPlayer/AudioPlayer';\r\nimport TrackProgress from '../TrackProgress/TrackProgress';\r\nimport TrackControls from '../TrackControls/TrackControls';\r\nimport TrackPreview from '../TrackPreview/TrackPreview';\r\n\r\n\r\ninterface PlayListPlayerProps {\r\n  tracks: Track[]\r\n  activeTrack: Track\r\n  playbackState: PlaybackState\r\n  updatePlaybackState: (state: Partial<PlaybackState>) => void\r\n  onChangeTrack: (track: Track) => void\r\n}\r\n\r\nconst PlayListPlayer = ({ tracks, activeTrack, playbackState, updatePlaybackState, onChangeTrack }: PlayListPlayerProps) => {\r\n  const playerRef = useRef(null);\r\n  const [ randomize, setRandomize] = useState(false);\r\n\r\n  const onToggleTrack = (track: Track) => {\r\n    if (activeTrack.id !== track.id) return;\r\n\r\n    updatePlaybackState({ playing: !playbackState.playing });\r\n  }\r\n\r\n  const onTrackMove = (forward?: boolean) => {\r\n    const currentTrackIndex = tracks.findIndex(({ id }) => id === activeTrack.id);\r\n    let index = 0;\r\n\r\n    if (forward) {\r\n      index = currentTrackIndex < tracks.length - 1 ? currentTrackIndex + 1 : 0\r\n    } else {\r\n      index = currentTrackIndex !== 0 ? currentTrackIndex - 1 : tracks.length - 1;\r\n    }\r\n\r\n    onChangeTrack(tracks[index]);\r\n    updatePlaybackState({ duration: 0, played: 0 });\r\n  }\r\n\r\n  const onRandomizeToggle = () => {\r\n    setRandomize(value => !value);\r\n    updatePlaybackState({ looping: false });\r\n  }\r\n\r\n  const onLoopingToggle = () => {\r\n    setRandomize(false);\r\n    updatePlaybackState({ looping: !playbackState.looping });\r\n  }\r\n\r\n  const onVolumeChange = (volume: number) => {\r\n    updatePlaybackState({ volume, muted: volume === 0 });\r\n  }\r\n\r\n  const onVolumeToggle = () => {\r\n    updatePlaybackState({ muted: !playbackState.muted });\r\n  }\r\n\r\n  const onSeekMouseDown = () => {\r\n    updatePlaybackState({ seeking: true });\r\n  }\r\n\r\n  const onSeekChange = (value: number) => {\r\n    updatePlaybackState({ played: value / 100 });\r\n  }\r\n\r\n  const onSeekMouseUp = (value: number) => {\r\n    const ref: LegacyRef<ReactPlayer> = playerRef;\r\n\r\n    ref?.current?.seekTo(value / 100);\r\n    updatePlaybackState({ seeking: false });\r\n  }\r\n\r\n  const onDuration = (duration: number) => {\r\n    updatePlaybackState({ duration });\r\n  }\r\n\r\n  const onProgress = ({ played }: any) => {\r\n    const { seeking } = playbackState;\r\n\r\n    if (!seeking) {\r\n      updatePlaybackState({ played });\r\n    }\r\n  }\r\n\r\n  const onEnded = () => {\r\n    const { looping } = playbackState;\r\n\r\n    if (randomize) {\r\n      const availableTracks = tracks.filter(({ id }) => id !== activeTrack.id);\r\n      const newActiveTrack = sample(availableTracks) as Track;\r\n\r\n      onChangeTrack(newActiveTrack);\r\n      return\r\n    }\r\n\r\n    if (!looping) {\r\n      onTrackMove(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"playlist-player\">\r\n      <TrackPreview\r\n        playbackState={playbackState}\r\n        activeTrack={activeTrack}\r\n        onToggleTrack={onToggleTrack}\r\n        onTrackMove={onTrackMove}\r\n      >\r\n        <TrackControls\r\n          playbackState={playbackState}\r\n          randomize={randomize}\r\n          onRandomizeToggle={onRandomizeToggle}\r\n          onLoopingToggle={onLoopingToggle}\r\n          onVolumeChange={onVolumeChange}\r\n          onVolumeToggle={onVolumeToggle}\r\n        />\r\n      </TrackPreview>\r\n      <TrackProgress\r\n        playbackState={playbackState}\r\n        onSeekMouseDown={onSeekMouseDown}\r\n        onSeekChange={onSeekChange}\r\n        onSeekMouseUp={onSeekMouseUp}\r\n      />\r\n      <AudioPlayer \r\n        ref={playerRef}\r\n        playbackState={playbackState}\r\n        activeTrack={activeTrack}\r\n        onDuration={onDuration}\r\n        onProgress={onProgress}\r\n        onEnded={onEnded}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlayListPlayer;\r\n","import cx from 'classnames';\r\n\r\nimport { PlaybackState } from '../usePlaybackState';\r\n\r\nimport './TrackList.scss';\r\n\r\n\r\ninterface TrackListProps {\r\n  playbackState: PlaybackState\r\n  tracks: Track[]\r\n  activeTrack: Track\r\n  onChangeTrack: (track: Track) => void\r\n}\r\n\r\nconst TrackList = ({ tracks, activeTrack, playbackState, onChangeTrack }: TrackListProps) => {\r\n  const isActiveTrackPlaying = (track: Track) => {\r\n    return playbackState.playing && activeTrack.id === track.id;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"tracks-list\">\r\n      {tracks.map(track => (\r\n        <li\r\n          key={track.id}\r\n          className={cx('track pointer', { active: activeTrack.id === track.id })}\r\n          onClick={() => onChangeTrack(track)}>\r\n            <i className={cx('icon fa fa-fw', `fa-${isActiveTrackPlaying(track) ? 'pause' : 'play'}`)} aria-hidden=\"true\"></i>\r\n          <span className=\"track-name\">{track.name}</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TrackList;\r\n","import { useEffect, RefObject } from 'react'\r\n\r\n\r\ntype AnyEvent = MouseEvent | TouchEvent\r\n\r\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(ref: RefObject<T>, handler: (event: AnyEvent) => void) {\r\n  useEffect(() => {\r\n    const listener = (event: AnyEvent) => {\r\n      const el = ref?.current\r\n\r\n      // Do nothing if clicking ref's element or descendent elements\r\n      if (!el || el.contains(event.target as Node)) {\r\n        return\r\n      }\r\n\r\n      handler(event)\r\n    }\r\n\r\n    document.addEventListener(`mousedown`, listener);\r\n    document.addEventListener(`touchstart`, listener);\r\n\r\n    return () => {\r\n      document.removeEventListener(`mousedown`, listener);\r\n      document.removeEventListener(`touchstart`, listener);\r\n    }\r\n\r\n    // Reload only if ref or handler changes\r\n  }, [ref, handler])\r\n}\r\n\r\nexport default useOnClickOutside;\r\n","import { useRef, ReactNode, RefObject } from 'react';\r\nimport cx from 'classnames';\r\n\r\nimport useOnClickOutside  from '../../hooks/useOutsideClick';\r\n\r\nimport './Drawer.scss';\r\n\r\ninterface DrawerProps {\r\n  opened: boolean\r\n  position: 'right' | 'left'\r\n  onClose: () => void\r\n  blackout?: boolean\r\n  preventClose?: boolean\r\n  closeOutside?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\ninterface CloseOutsideProps<T> {\r\n  targetRef: RefObject<T>\r\n  callback: () => void\r\n}\r\n// Since we can't use optional hooks - create a dummy component to cover click outside case.\r\nconst CloseOutside = <T extends HTMLElement = HTMLElement>({ targetRef, callback }: CloseOutsideProps<T>) => {\r\n  useOnClickOutside(targetRef, callback);\r\n\r\n  return null;\r\n}\r\n\r\nexport const Drawer = ({ opened, position, blackout, children, onClose, preventClose, closeOutside }: DrawerProps) => {\r\n  const ref = useRef(null);\r\n\r\n  const handleClose = () => {\r\n    !preventClose && onClose();\r\n  }\r\n\r\n  return (\r\n    <div className={cx('drawer', { opened, blackout, [position]: true, 'prevent-close': preventClose })}>\r\n      <div className=\"drawer-blackout\"></div>\r\n      {(closeOutside && !preventClose) && <CloseOutside targetRef={ref} callback={onClose} />}\r\n      <div className=\"drawer-content\" ref={ref}>\r\n        <button className=\"btn shadow drawer-close\" onClick={handleClose}>\r\n          <i className=\"fa fa-close\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Drawer;\r\n","import { useState, memo } from 'react';\r\nimport cx from 'classnames';\r\n\r\nimport { TRACKS_LIST } from '../../lists/tracksList';\r\nimport { usePlaybackState } from './usePlaybackState';\r\n\r\nimport PlayListPlayer from './Player/PlayListPlayer/PlayListPlayer';\r\nimport TrackList from './TrackList/TrackList';\r\nimport Drawer from '../Drawer/Drawer';\r\n\r\nimport './PlayListMenu.scss';\r\n\r\n\r\nconst PlayListMenu = () => {\r\n  const [ activeTrack, setActiveTrack ] = useState(TRACKS_LIST[0]);\r\n  const [ playbackState, setPlaybackState ] = usePlaybackState();\r\n  const [ opened, setOpened ] = useState(false);\r\n\r\n  const onChangeTrack = (track: Track) => {\r\n    const { playing } = playbackState;\r\n\r\n    // clicked on the same track\r\n    if (activeTrack && activeTrack.id === track.id) {\r\n      setPlaybackState({ playing: !playing });\r\n    } else {\r\n      setActiveTrack(track);\r\n      setPlaybackState({ playing: true, duration: 0, played: 0 });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button className=\"btn shadow open-playlist\" onClick={() => setOpened(true)}>\r\n        <i className={cx('fa fa-music', { playing: playbackState.playing })} aria-hidden=\"true\"></i>\r\n      </button>\r\n      <Drawer opened={opened} position=\"right\" onClose={() => setOpened(false)} closeOutside>\r\n        {activeTrack &&\r\n          <PlayListPlayer\r\n            tracks={TRACKS_LIST}\r\n            activeTrack={activeTrack}\r\n            playbackState={playbackState}\r\n            onChangeTrack={onChangeTrack}\r\n            updatePlaybackState={setPlaybackState}\r\n          />}\r\n        <TrackList\r\n          tracks={TRACKS_LIST}\r\n          activeTrack={activeTrack}\r\n          playbackState={playbackState}\r\n          onChangeTrack={onChangeTrack}\r\n        />\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(PlayListMenu);\r\n","import { ReactNode } from 'react';\r\n\r\nimport './MenuSection.scss';\r\n\r\n\r\ninterface MenuSectionProps {\r\n  header?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nconst MenuSection = ({ header, children }: MenuSectionProps) => {\r\n  return (\r\n    <div className=\"menu-section\">\r\n      <h6 className=\"menu-section-title\">{header}</h6>\r\n      <div className=\"menu-section-content\">{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MenuSection;\r\n","import { useEffect } from 'react';\r\nimport Toggle from 'react-toggle';\r\nimport cx from 'classnames';\r\n\r\nimport './HardmodeSection.scss';\r\n\r\n\r\nconst calculateStepsLimit = (boardSize: number) => {\r\n  const successLimit = boardSize / 2;\r\n  const LIMIT_RATIO = 1.74; // kinda random ratio, no hard science included.\r\n\r\n  return successLimit + Math.floor(successLimit / LIMIT_RATIO);\r\n};\r\n\r\ninterface HardmodeSectionProps {\r\n  options: GameConfig\r\n  onOptionsUpdate: (newOptions: Partial<GameConfig>) => void\r\n}\r\n\r\nconst HardmodeSection = ({ options, onOptionsUpdate }: HardmodeSectionProps) => {\r\n  const { stepsLimit, boardSize } = options;\r\n  const limit = calculateStepsLimit(boardSize);\r\n\r\n  useEffect(() => {\r\n    if (stepsLimit) {\r\n      const limit = calculateStepsLimit(boardSize);\r\n  \r\n      onOptionsUpdate({ stepsLimit: limit });\r\n    }\r\n\r\n  }, [boardSize, onOptionsUpdate, stepsLimit]);\r\n\r\n  const setStepsLimit = () => {\r\n    onOptionsUpdate({ stepsLimit: stepsLimit ? 0 : limit });\r\n  }\r\n\r\n  return (\r\n    <div className=\"hardmode-section\">\r\n      <div className=\"section-row\">\r\n        <label className=\"toggle-label pointer\">\r\n          <Toggle defaultChecked={!!stepsLimit} onChange={setStepsLimit} />\r\n          <span className={cx('label-header', { active: stepsLimit })}>Limited steps</span>\r\n        </label>\r\n        <p className=\"section-description\">\r\n          If this option is enabled - you will have limited steps to finish the game.\r\n        </p>\r\n        {!!options.stepsLimit &&\r\n          <p className=\"section-description\">You have only <span className=\"highlight\">{limit}</span> attempts to finish the game</p>}\r\n      </div>\r\n      {/* TODO: future feature */}\r\n      {/* <div className=\"section-row\">\r\n        <label className=\"toggle-label pointer\">\r\n          <Toggle defaultChecked={randomizeCells} onChange={() => onOptionsUpdate({ randomizeCells: !randomizeCells })} />\r\n          <span className={cx('label-header', { active: randomizeCells })}>Randomize cells</span>\r\n        </label>\r\n        <p className=\"section-description\">If this option is enabled - all hidden cells will be randomize position after each failed attempt.</p>\r\n        {!!randomizeCells && <p className=\"section-description\"><span className=\"highlight\">Are you sure?</span></p>}\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HardmodeSection;\r\n","import cx from 'classnames';\r\n\r\nimport { BOARD_SIZES } from '../../constants/constants';\r\n\r\nimport './BoardSelectionSection.scss';\r\n\r\n\r\ninterface BoardSelectionSectionProps {\r\n  options: GameConfig\r\n  onOptionsUpdate: (newOptions: Partial<GameConfig>) => void\r\n}\r\n\r\nconst BoardSelectionSection = ({ options, onOptionsUpdate }: BoardSelectionSectionProps) => {\r\n  const { boardSize } = options;\r\n  const sizes = Object.entries(BOARD_SIZES);\r\n\r\n  return (\r\n    <ul className=\"board-selection\">\r\n      {sizes.map(([ sizeName, sizeList ]) => (\r\n        <li className={`size-row ${sizeName}`} key={sizeName}>\r\n          <div className=\"size-title\" >{sizeName} board:</div>\r\n          {sizeList.map(({ cells, rows }) => (\r\n            <div\r\n              key={cells}\r\n              onClick={() => onOptionsUpdate({ boardSize: cells, boardRows: rows })}\r\n              className={cx('size-item pointer', { active: cells === boardSize })}>\r\n              {cells}\r\n            </div>\r\n          ))} \r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default BoardSelectionSection;\r\n","import { useEffect, useState } from 'react';\r\nimport cx from 'classnames';\r\n\r\nimport Message from '../Message/Message';\r\n\r\nimport './CardSelectionSection.scss';\r\n\r\n\r\nconst insufficientCardsSelected = (cards: CardItem[], boardSize: number) => {\r\n  const selectedCards = cards.filter(({ selected }) => !!selected);\r\n\r\n  return Math.max(0, boardSize / 2 - selectedCards.length);\r\n}\r\n\r\ninterface CardSelectionSectionProps {\r\n  options: GameConfig\r\n  onOptionsUpdate: (newOptions: Partial<GameConfig>) => void\r\n  onError?: (error?: boolean) => void\r\n}\r\n\r\nconst CardSelectionSection = ({ options, onOptionsUpdate, onError }: CardSelectionSectionProps) => {\r\n  const [ insufficientCardCount, setInsufficientCardCount ] = useState(0);\r\n  const { cardItems, boardSize } = options;\r\n\r\n  useEffect(() => {\r\n    const selectedCards = cardItems.filter(({ selected }) => !!selected);\r\n    const insufficientCardCount = insufficientCardsSelected(selectedCards, boardSize);\r\n\r\n\r\n    if (insufficientCardCount > 0) {\r\n      let cardsToSelect = boardSize / 2;\r\n      const filledCardItems = cardItems.map(card => ({ ...card, selected: !!(cardsToSelect-- > 0) }));\r\n\r\n      onOptionsUpdate({ cardItems: filledCardItems });\r\n    }\r\n\r\n    setInsufficientCardCount(insufficientCardCount > 0 ? 0 : insufficientCardCount);\r\n    onError?.(false);\r\n\r\n  }, [boardSize, onOptionsUpdate]);\r\n\r\n  const toggleCard = (selectedCard: CardItem) => {\r\n    const { name } = selectedCard;\r\n\r\n    const updatedCardItems = cardItems.map(card => card.name === name ? { ...card, selected: !card.selected } : card );\r\n    const insufficientCardCount = insufficientCardsSelected(updatedCardItems, boardSize);\r\n\r\n    setInsufficientCardCount(insufficientCardCount);\r\n    onError?.(!!insufficientCardCount);\r\n    // Even if there is an error, we're not blocking updating cards by user.\r\n    // User will be forced to pick correct amount of cards before proceed anyway.\r\n    onOptionsUpdate({ cardItems: updatedCardItems });\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-selection\">\r\n      <div className=\"section-description\">Selected cards will be randomly reflected on your board.</div>\r\n      <ul className=\"card-list\">\r\n        {cardItems.map(card => (\r\n          <li\r\n            key={card.name}\r\n            onClick={() => toggleCard(card)}\r\n            className={cx('card pointer', { selected: card.selected})} >\r\n            <i className=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i>\r\n            <img className=\"card-image\" src={card.imagePath} alt=\"card preview\" />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {!!insufficientCardCount &&\r\n        <Message type=\"error\">You should choose at least {insufficientCardCount} card(s) for this board size.</Message>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardSelectionSection;\r\n","import { useState } from 'react';\r\n\r\nimport Drawer from '../Drawer/Drawer';\r\nimport MenuSection from '../MenuSection/MenuSection';\r\nimport HardmodeSection from '../HardmodeSection/HardmodeSection';\r\nimport BoardSelectionSection from '../BoardSelectionSection/BoardSelectionSection';\r\nimport CardSelectionSection from '../CardSelectionSection/CardSelectionSection';\r\n\r\nimport './SettingsMenu.scss';\r\n\r\n\r\ninterface SettingsMenuProps {\r\n  options: GameConfig\r\n  onOptionsUpdate: (newOptions: Partial<GameConfig>) => void\r\n}\r\n\r\nconst SettingsMenu = ({ options, onOptionsUpdate }: SettingsMenuProps) => {\r\n  const [ opened, setOpened ] = useState(true);\r\n  const [ preventClose, setPreventClose ] = useState(false);\r\n\r\n  const onError = (hasError?: boolean) => {\r\n    setPreventClose(!!hasError);\r\n  } \r\n\r\n  return (\r\n    <>\r\n      <button className=\"btn shadow open-settings\" onClick={() => setOpened(true)}>\r\n        <i className=\"fa fa-sliders\" aria-hidden=\"true\"></i>\r\n      </button>\r\n      <Drawer opened={opened} position=\"left\" onClose={() => setOpened(false)} blackout closeOutside preventClose={preventClose}>\r\n        <MenuSection header={<><i className=\"fa fa-th-large\" aria-hidden=\"true\"></i>Board size:</>}>\r\n          <BoardSelectionSection options={options} onOptionsUpdate={onOptionsUpdate} />\r\n        </MenuSection>\r\n\r\n        <MenuSection header={<><i className=\"fa fa-picture-o\" aria-hidden=\"true\"></i>Board cards:</>}>\r\n          <CardSelectionSection options={options} onOptionsUpdate={onOptionsUpdate} onError={onError} />\r\n        </MenuSection>\r\n\r\n        <MenuSection header={<><i className=\"fa fa-step-forward\" aria-hidden=\"true\"></i>Hardmode options:</>}>\r\n          <HardmodeSection options={options} onOptionsUpdate={onOptionsUpdate} />\r\n        </MenuSection>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingsMenu;\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nimport {\r\n    generateBoard,\r\n    areAllCellsOpened,\r\n    setGuessedCells,\r\n    setOpenedLastCells,\r\n    setOpenedCells,\r\n    setClosedCells\r\n} from '../../utils/boardUtils';\r\nimport { MAX_CARD_OPEN_COUNT, CARD_FLIP_ANIMATION_DELAY } from '../../constants/constants';\r\nimport { GAME_CONFIG } from '../../config/config';\r\n\r\nimport BoardGrid from '../Board/BoardGrid/BoardGrid';\r\nimport Message from '../Message/Message';\r\nimport PointsBoard from '../PointsBoard/PointsBoard';\r\nimport GameOver from '../GameOver/GameOver';\r\nimport PlayListMenu from '../PlayListMenu/PlayListMenu';\r\nimport SettingsMenu from '../SettingsMenu/SettingsMenu';\r\n\r\nimport './MemoryGame.scss';\r\n\r\n\r\nconst MemoryGame = () => {\r\n  const [ board, setBoard ] = useState<Board>([]);\r\n  const [ cellsToCompare, setCellsToCompare ] = useState<BoardCell[]>([]);\r\n  const [ boardError, setboardError ] = useState(null);\r\n  const [ attempts, setAttempts ] = useState(0);\r\n  const [ guessedCount, setGuessedCount ] = useState(0);\r\n  const [ options, setOptions ] = useState(GAME_CONFIG);\r\n\r\n  const createBoard = useCallback(() => {\r\n    resetGameOptions();\r\n\r\n    try {\r\n      const board = generateBoard(options.boardSize, options.cardItems);\r\n\r\n      setBoard(board);\r\n    } catch(error) {\r\n      setboardError(error.message);\r\n    }\r\n  }, [options])\r\n\r\n  useEffect(() => {\r\n    createBoard();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    createBoard();\r\n  }, [options.boardSize, createBoard]);\r\n\r\n  useEffect(() => {\r\n    if (!cellsToCompare.length) return;\r\n\r\n    if (cellsToCompare.length === MAX_CARD_OPEN_COUNT) {\r\n      const firstOpenedCard = cellsToCompare[0];\r\n      const lastOpenedCard = cellsToCompare[cellsToCompare.length - 1];\r\n\r\n      setAttempts(attempts => attempts + 1);\r\n\r\n      if (firstOpenedCard.name === lastOpenedCard.name) {\r\n        setCellsToCompare([]);\r\n        setGuessedCount(count => count + MAX_CARD_OPEN_COUNT);\r\n        setBoard(board => setGuessedCells(board, firstOpenedCard.name));\r\n      } else {\r\n        // Using timeout here, since we want to show opened state for a sec and close after.\r\n        setTimeout(() => {\r\n          setCellsToCompare([]);\r\n          setBoard(board => setClosedCells(board));\r\n        }, CARD_FLIP_ANIMATION_DELAY);\r\n      }\r\n    }\r\n  }, [cellsToCompare]);\r\n\r\n  useEffect(() => {\r\n    const lastCardsPair = (board.length - guessedCount) === MAX_CARD_OPEN_COUNT;\r\n\r\n    // If only two last items left - just open them and finish the game.\r\n    if (lastCardsPair) {\r\n      setBoard(board => setOpenedLastCells(board));\r\n      setGuessedCount(board.length);\r\n    }\r\n  }, [board.length, guessedCount]);\r\n\r\n  const onOptionsUpdate = useCallback((newOptions: Partial<GameConfig>) => {\r\n    setOptions(options => ({ ...options, ...newOptions }));\r\n  }, [])\r\n\r\n  const resetGameOptions = () => {\r\n    setAttempts(0);\r\n    setGuessedCount(0);\r\n  }\r\n\r\n  const isGameOver = () => {\r\n    const allCellsOpened = areAllCellsOpened(board.length, guessedCount);\r\n\r\n    if (options.stepsLimit) {\r\n      const isLoseByStepsLimit = options.stepsLimit - attempts <= 0;\r\n\r\n      return isLoseByStepsLimit ? { gameOver: true, winner: false } : { gameOver: allCellsOpened, winner: true};\r\n    }\r\n\r\n    return { gameOver: allCellsOpened, winner: allCellsOpened };\r\n  }\r\n\r\n  const onCellClick = useCallback(cell => {\r\n    if (cellsToCompare.length < MAX_CARD_OPEN_COUNT) {\r\n\r\n      setCellsToCompare(cells => [...cells, cell]);\r\n      setBoard(board => setOpenedCells(board, cell.id))\r\n    }\r\n  }, [cellsToCompare.length])\r\n\r\n  const gameState = isGameOver();\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      {gameState.gameOver && <GameOver winner={gameState.winner} onNewGame={createBoard} />}\r\n      <h5 className=\"game-header\">React memory game</h5>\r\n      \r\n      <PointsBoard attempts={attempts} guessedCount={guessedCount} options={options} />\r\n\r\n      {boardError\r\n        ? <Message type=\"error\">{boardError}</Message>\r\n        : <BoardGrid board={board} rows={options.boardRows} onCellClick={onCellClick} />}\r\n\r\n      <SettingsMenu options={options} onOptionsUpdate={onOptionsUpdate} />\r\n      <PlayListMenu />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default MemoryGame;\r\n","import cuid from 'cuid';\r\nimport shuffle from 'lodash/shuffle';\r\nimport sampleSize from 'lodash/sampleSize';\r\n\r\nexport const generateBoard = (boardSize: number, cardItems: CardItem[]) => {\r\n  if (!boardSize) throw new Error('Missing size format');\r\n  if (boardSize % 2 !== 0) throw new Error('Incorrect size amount');\r\n  if (cardItems.length < boardSize / 2) throw new Error('insufficient number of card items');\r\n\r\n  const selectedCardItems = cardItems.filter(({ selected }) => !!selected);\r\n  // It's only half of items, since we need two same card to compare\r\n  const chosenCardItems: CardItem[] = sampleSize(selectedCardItems, boardSize / 2);\r\n  const board: Board = shuffle([...chosenCardItems, ...chosenCardItems])\r\n    .map((cardItem: CardItem) => ({ id: cuid(), ...cardItem }));\r\n\r\n  return board;\r\n};\r\n\r\nexport const areAllCellsOpened = (boardSize: number, openedCells: number) => {\r\n  return boardSize > 0 && boardSize === openedCells;\r\n}\r\n\r\nexport const setGuessedCells = (board: Board, cellName: string) => {\r\n  return board.map(cell => cell.name === cellName ? { ...cell, guessed: true } : cell);\r\n}\r\n\r\nexport const setOpenedCells = (board: Board, cellId: string) => {\r\n  return board.map(cell => cell.id === cellId && !cell.opened ? { ...cell, opened: true } : cell);\r\n}\r\n\r\nexport const setClosedCells = (board: Board) => {\r\n  return board.map(cell => cell.opened && !cell.guessed ? { ...cell, opened: false } : cell);\r\n}\r\n\r\nexport const setOpenedLastCells = (board: Board) => {\r\n  return board.map(cell => !cell.guessed && !cell.opened ? { ...cell, guessed: true, opened: true } : cell);\r\n}\r\n\r\nexport const setRandomizeCells = (board: Board) => {\r\n  const notGuessedCells: Board = [];\r\n  const guessedCellsHash = board.reduce((guessed: { [key: string ]: BoardCell }, cell, index) => {\r\n    cell.guessed ? guessed[index] = cell : notGuessedCells.push(cell);\r\n\r\n    return guessed;\r\n  }, {});\r\n\r\n  const shuffledBoard = shuffle(notGuessedCells);\r\n\r\n  for (let index in guessedCellsHash) {\r\n    shuffledBoard.splice(parseInt(index), 0, guessedCellsHash[index]);\r\n  }\r\n\r\n  return shuffledBoard;\r\n}\r\n","import MemoryGame from './components/MemoryGame/MemoryGame';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => <div className=\"app\"><MemoryGame /></div>\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport './styles/main.scss';\r\n\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}